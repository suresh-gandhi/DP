/*
    Consider a game where a player can score 3 or 5 or 10 points in a move. Given a total score of n,
    we need to find the number of ways to reach a given score.

    Lets say that we are given a score of 30. I try to think of the last step here. What could have I done
    to reach here. Either I could have scored 3 at the last or 5 or 10 and made it to 30. All of these are
    different possible paths to reach 30 as the last step is different in all of the three. Also, we can say
    that these are the only possible paths to reach 30. We can't do something else! We have to go through these.
    Hence I can say that if try to find all the possible different paths to reach 27(30 - 3) and all the possible
    different paths to reach 25(30 - 5) and all the possible different paths to reach 20(30 - 10). Then I can say
    that total of these would give me the required answer. Let us denote T(n) to be the total number of ways
    to reach a given score of n. Then based upon our logic we can say that
        T(n) = T(n - 3) + T(n - 5) + T(n - 10)
    Doing this we could eventually boil down to T(0) which is nothing but the number of ways to reach 0 from itself.
    No need to reach there we are already here and it is 1. We can't reach negative numbers clearly and it should return
    0.
    Ofcourse I am assuming that the order in which the scores are written makes sense that is
    3, 5 to make 8 is different from 5, 3 to make 8. They are not the same. Their last step is
    different and would be counted as different ways according to our algorithm.
 */

public class NumberOfWaysToReachAGivenScore {

    // Using a recursive implementation.
    public int countTheNumberOfWaysToReachRecursive(int score){
        if(score < 0){
            return 0;
        }

        if(score == 0){
            return 1;
        }

        return countTheNumberOfWaysToReachRecursive(score - 3) + countTheNumberOfWaysToReachRecursive(score - 5)
                + countTheNumberOfWaysToReachRecursive(score - 10);
    }

    // Using a dynamic programming implementation as the subproblems overlap here which can be easily seen.
    // So going bottom up would be the correct approach here.
    // We can also do it using hash=tables and storing only what is required however that woudl be
    // useful when we take leap steps like score/2 everytime as it greatly reduces the space then.

    public int countTheNumberOfWaysDp(int score){
        if(score < 0){
            return 0;
        }
        // the length is at least 1 if we have reached up to this point.
        int[] dp = new int[score + 1];
        dp[0] = 1;
        // don't worry this wont run if score == 0.
        for(int i = 1; i <= score; i++){
            if(i - 10 >= 0){
                //System.out.println("inside i - 10");
                dp[i] += dp[i - 10] + dp[i - 5] + dp[i - 3];
            }
            else if(i - 5 >= 0){
                //System.out.println("inside i - 5");
                dp[i] += dp[i - 5] + dp[i - 3];
            }
            else if(i - 3 >= 0){
                //System.out.println("inside i - 3");
                dp[i] += dp[i - 3];
            }
            else{
                //System.out.println("inside else");
            }
        }
        return dp[score];
    }

    /*
        We can even do it in a bottom up fashion. This is also referred to as the forward
        dp style.
     */

    public int countTheNumberOfWaysBottomUp(int score){
        if(score < 0){
            return 0;
        }
        int dp[] = new int[score + 1];
        dp[0] = 1; // wouldn't give a compile time error as we have ensured that the score is at least 0
                    // till this point and hence the length of dp array at least 1.
        for(int i = 0; i <= score; i++){
            // Affect all of the things that can be affected by dp[i].
            // NOTE: I can be more efficient in writing if statements but I have ignored that
            // to make the things more simple to understand.
            if(i + 3 <= score){
                dp[i + 3] += dp[i];
            }

            if(i + 5 <= score){
                dp[i + 5] += dp[i];
            }

            if(i + 10 <= score){
                dp[i + 10] += dp[i];
            }
        }
        return dp[score];
    }

}
