/*

    Consider the same game where we have to reach a given score. But now the order doesn't matter
    i.e. fetching 3 and then 5 points is the same as fetching 5 and then 3 points. So the score of
    8 can be reached by only one way.

    We can do it easily and cleverly. I'll do it in a bottom up fashion as it the most intuitive and
    natural for me here.

    My approach here basically is to basically first take all the 3 steps. That is I will start from
    dp[0] and go till dp[score - 3] and for each element I will affect the 3 step forward ones(as only
    they will be affected) i.e.
        for(i -> 0 till i -> score - 3)
            dp[i + 3] += dp[i];

    After this iteration we can say that every element dp[i] would denote the number of possible ways to
    reach dp[i] with 3 step as the last step(which is the only step we have executed so far).

    Now I take all the 5 steps. That is I will start from dp[0] and go till dp[score - 5] and for each element
    I will affect the 5 step forward ones(as only they would be affected in this particular step)
        for(i -> 0 till i -> score - 5)
            dp[i + 5] += dp[i];

    After this iteration we can say that every element dp[i] would denote the number of possible ways to reach
    dp[i] with the 5 step as the last step(if its present in the sequence of steps) else 3 step as the last.
    I'll use an example to demonstrate this. Lets say that dp[i] has already a value of 7 in it after the 3 step
    iteration. Now when I do a 5 step iteration here, it is possible that the number of ways to reach i would increase to
    lets say 10 from (i - 5)th position(which has a value 3). Now these 3 ways which are added to make it to 10(the value
    of dp[i]) are nothing but all the 3 sequences which reach up to (i - 5) appended by 5. Now those sequences(till (i - 5)th)
    can have their last step as 3 or 5(5 because we are going from bottom to up, so we must have dealt with (i-5) before).
    Hence the earlier 7 ways were ending at 3. These 3 ways which we have added end at 5.

    I just mean to say that we can never make a sequence to reach here with 5 coming before 3 because we are executing 5
    steps once we are completely done with making all the 3 steps.

    Same argument can be made of 10 steps.

 */

public class CountTheNumberOfWaysToReachAScoreII {

    public int countTheNumberOfWaysToReachAScoreII(int score){
        if(score < 0){
            return 0;
        }

        int[] dp = new int[score + 1];
        dp[0] = 1; // Nah! It cannot be a compile time error.

        // First making all the three steps.
        for(int i = 0; i <= score - 3; i++){
            dp[i + 3] += dp[i];
        }

        // Then making all the 5 steps.
        for(int i = 0; i <= score - 5; i++){
            dp[i + 5] += dp[i];
        }

        // Then making all the 10 steps.
        for(int i = 0; i <= score - 10; i++){
            dp[i + 10] += dp[i];
        }

        return dp[score];
    }

}